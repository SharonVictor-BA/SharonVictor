# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18AWPCMqJpvj-38SHmHtKDX6Mh4_ZQust
"""

import streamlit as st
from datetime import date, timedelta
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor

import streamlit as st
from datetime import date, timedelta
import pandas as pd
import matplotlib.pyplot as plt

# ------------------------------
# Page Configuration
# ------------------------------
st.set_page_config(page_title="CO2 Emission Forecasting App", page_icon="üåø", layout="wide")

# ------------------------------
# App Header
# ------------------------------
st.image("https://geographical.co.uk/wp-content/uploads/carbon-dioxide-emissions-title.jpg", width=80)
st.title("üåç CO2 Emission Forecasting App")
st.caption("Built for Industrial Auditing Purposes")

# ------------------------------
# Load Data
# ------------------------------
df = pd.read_csv("CO2_Emission_Prediction_Dataset.csv")
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

pred_df = pd.read_csv("All_CO2_Predictions_Full_10001.csv")
pred_df['Date'] = pd.to_datetime(pred_df['Date'], format='%d-%m-%Y')

# ------------------------------
# Constants
# ------------------------------
target_vars = [
    'Total CO2 Emissions from Facility (kg)',
    'CO2 Emissions After Initiatives (kg)',
    'CO2 Emissions per km/mile (kg/km)'
]
pred_target_map = {
    'Total CO2 Emissions from Facility (kg)': 'Predicted CO2 Emissions from Facility (kg)',
    'CO2 Emissions After Initiatives (kg)': 'Predicted CO2 Emissions After Initiatives (kg)',
    'CO2 Emissions per km/mile (kg/km)': 'Predicted CO2 Emissions per km/mile (kg/km)'
}
FACILITY_TYPES = ['Manufacturing', 'Office', 'Warehouse']
EMISSION_SOURCES = ['Electricity', 'Fuel', 'Transport', 'Waste']
TRANSPORT_MODES = ['Air', 'Rail', 'Ship', 'Truck']
MATERIAL_TYPES = ['Aluminum', 'Plastic', 'Steel']
SUPPLY_CHAIN_ACTIVITIES = ['Inbound', 'Internal', 'Outbound']

# ------------------------------
# Sidebar Inputs
# ------------------------------
st.sidebar.header("üì• Forecast Parameters")
selected_facility = st.sidebar.selectbox("Facility Type", FACILITY_TYPES)
selected_emission = st.sidebar.selectbox("Emission Source", EMISSION_SOURCES)
selected_transport = st.sidebar.selectbox("Transport Mode", TRANSPORT_MODES)
selected_material = st.sidebar.selectbox("Material Type", MATERIAL_TYPES)
selected_activity = st.sidebar.selectbox("Supply Chain Activity", SUPPLY_CHAIN_ACTIVITIES)
today = date.today()
selected_pred_date = st.sidebar.date_input("Date of Prediction", value=today + timedelta(days=30),
                                           min_value=today, max_value=today + timedelta(days=365))

# ------------------------------
# Filter prediction from CSV
# ------------------------------
filtered_pred = pred_df[
    (pred_df['Facility Type'] == selected_facility) &
    (pred_df['Emission Source'] == selected_emission) &
    (pred_df['Transport Mode'] == selected_transport) &
    (pred_df['Material Type'] == selected_material) &
    (pred_df['Supply Chain Activity'] == selected_activity) &
    (pred_df['Date'] == pd.to_datetime(selected_pred_date))
]

# ------------------------------
# Tabs
# ------------------------------
tab1, tab2 = st.tabs(["üìà Forecast & KPIs", "üìä Historical Comparison"])

# --- Tab 1: Prediction Metrics
with tab1:
    if not filtered_pred.empty:
        for target in target_vars:
            pred_val = filtered_pred[pred_target_map[target]].values[0]
            st.markdown(f"### {target}")
            st.metric(label="Predicted Value", value=f"{pred_val:,.2f}")
            st.markdown("---")
    else:
        st.warning("No prediction data available for the selected combination.")

# --- Tab 2: Historical + Prediction Line
with tab2:
    st.subheader("üìä Historical vs Forecast (External) CO‚ÇÇ Emissions")

    filtered_hist = df[
        (df['Facility Type'] == selected_facility) &
        (df['Emission Source'] == selected_emission) &
        (df['Transport Mode'] == selected_transport) &
        (df['Material Type'] == selected_material) &
        (df['Supply Chain Activity'] == selected_activity)
    ].sort_values('Date')

    filtered_pred_full = pred_df[
        (pred_df['Facility Type'] == selected_facility) &
        (pred_df['Emission Source'] == selected_emission) &
        (pred_df['Transport Mode'] == selected_transport) &
        (pred_df['Material Type'] == selected_material) &
        (pred_df['Supply Chain Activity'] == selected_activity)
    ].sort_values('Date')

    if not filtered_hist.empty:
        for target in target_vars:
            st.markdown(f"#### {target}")
            fig, ax = plt.subplots(figsize=(10, 4))

            # Historical
            ax.plot(filtered_hist['Date'], filtered_hist[target], label="Historical", color="tab:blue")

            # Prediction Dotted Line
            if not filtered_pred_full.empty:
                ax.plot(
                    filtered_pred_full['Date'],
                    filtered_pred_full[pred_target_map[target]],
                    linestyle='dotted',
                    color='red',
                    label="Predicted"
                )

            # Highlighted Date
            ax.axvline(pd.to_datetime(selected_pred_date), color='orange', linestyle='--', label="Prediction Date")

            # Styling
            ax.set_xlabel("Date")
            ax.set_ylabel(target)
            ax.grid(True, linestyle=':', alpha=0.6)
            ax.set_facecolor("none")
            fig.patch.set_alpha(0.0)
            ax.legend()
            st.pyplot(fig)
    else:
        st.warning("No historical data found for selected filters.")
