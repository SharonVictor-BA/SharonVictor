# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18AWPCMqJpvj-38SHmHtKDX6Mh4_ZQust
"""

# Add to your existing imports
from datetime import datetime

# Set page config
st.set_page_config(
    page_title="CO2 Emission Forecasting App",
    page_icon="üåç",
    layout="wide"
)

# ------------------------------
# App Header & Business Value
# ------------------------------
st.markdown("""
## üåø CO2 Emission Forecasting App

This application enables organizations to forecast carbon dioxide (CO‚ÇÇ) emissions based on supply chain and operational variables.  
**Benefits & Business Value:**
- ‚úÖ Make data-driven sustainability decisions  
- ‚úÖ Identify emission hotspots across transport, materials, and facility types  
- ‚úÖ Support compliance with ESG and regulatory goals  
- ‚úÖ Visualize historical and predicted CO‚ÇÇ trends to track progress over time  
""")

st.markdown("---")

# ------------------------------
# Load and preprocess data
# ------------------------------
df = pd.read_csv("CO2_Emission_Prediction_Dataset.csv")
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

# Categorical and numeric features
categorical_features = ['Facility Type', 'Emission Source', 'Transport Mode', 'Material Type', 'Supply Chain Activity']
numeric_features = ['Year', 'Month']
target_vars = [
    'Total CO2 Emissions from Facility (kg)',
    'CO2 Emissions After Initiatives (kg)',
    'CO2 Emissions per km/mile (kg/km)'
]

# Fixed dropdown values
FACILITY_TYPES = ['Manufacturing', 'Office', 'Warehouse']
EMISSION_SOURCES = ['Electricity', 'Fuel', 'Transport', 'Waste']
TRANSPORT_MODES = ['Air', 'Rail', 'Ship', 'Truck']
MATERIAL_TYPES = ['Aluminum', 'Plastic', 'Steel']
SUPPLY_CHAIN_ACTIVITIES = ['Inbound', 'Internal', 'Outbound']

# ------------------------------
# Sidebar Inputs
# ------------------------------
st.sidebar.header("üì• Forecast Parameters")
target_choice = st.sidebar.selectbox("Target Variable", target_vars)
selected_facility = st.sidebar.selectbox("Facility Type", FACILITY_TYPES)
selected_emission = st.sidebar.selectbox("Emission Source", EMISSION_SOURCES)
selected_transport = st.sidebar.selectbox("Transport Mode", TRANSPORT_MODES)
selected_material = st.sidebar.selectbox("Material Type", MATERIAL_TYPES)
selected_activity = st.sidebar.selectbox("Supply Chain Activity", SUPPLY_CHAIN_ACTIVITIES)

# Allow selection from 01-Jan-1997 to 31-Dec-2050
selected_date = st.sidebar.date_input("Prediction Date", value=date(2027, 1, 1), min_value=date(1997, 1, 1), max_value=date(2050, 12, 31))

# ------------------------------
# Model Training
# ------------------------------
X = pd.get_dummies(df[categorical_features + numeric_features])
y = df[target_choice]

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestRegressor(n_estimators=200, random_state=42)
model.fit(X_train, y_train)

# ------------------------------
# Prediction
# ------------------------------
st.subheader("üîÆ Predicted Emission Output")

input_data = {
    'Facility Type_' + selected_facility: 1,
    'Emission Source_' + selected_emission: 1,
    'Transport Mode_' + selected_transport: 1,
    'Material Type_' + selected_material: 1,
    'Supply Chain Activity_' + selected_activity: 1,
    'Year': selected_date.year,
    'Month': selected_date.month
}

full_input = pd.DataFrame([input_data])
for col in X.columns:
    if col not in full_input.columns:
        full_input[col] = 0
full_input = full_input[X.columns]

pred_value = model.predict(full_input)[0]
predictions = [tree.predict(full_input)[0] for tree in model.estimators_]
conf_int = np.percentile(predictions, [2.5, 97.5])

st.success(f"Predicted {target_choice}: **{pred_value:,.2f}**")
st.info(f"95% Prediction Interval: **[{conf_int[0]:,.2f}, {conf_int[1]:,.2f}]**")

# ------------------------------
# Visual 1: Historical Trends (1997‚Äì2024)
# ------------------------------
st.subheader("üìâ Historical CO2 Emission Trend (1997‚Äì2024)")

historical_df = df[
    (df['Facility Type'] == selected_facility) &
    (df['Emission Source'] == selected_emission) &
    (df['Transport Mode'] == selected_transport) &
    (df['Material Type'] == selected_material) &
    (df['Supply Chain Activity'] == selected_activity) &
    (df['Date'] < pd.to_datetime('2025-01-01'))
][['Date', target_choice]].dropna().sort_values('Date')

if not historical_df.empty:
    st.line_chart(historical_df.rename(columns={target_choice: "CO2 Emissions"}).set_index('Date'))
else:
    st.warning("No historical data found for selected filters.")

# ------------------------------
# Visual 2: Future Forecast Point
# ------------------------------
st.subheader("üìà Future Emission Forecast")

future_df = pd.DataFrame({
    'Date': [selected_date],
    'Predicted CO2': [pred_value]
}).set_index('Date')

st.line_chart(future_df)
