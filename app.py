# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18AWPCMqJpvj-38SHmHtKDX6Mh4_ZQust
"""

import streamlit as st
from datetime import date, timedelta
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

# ------------------------------
# Page Configuration
# ------------------------------
st.set_page_config(page_title="CO2 Emission Forecasting App", page_icon="üåø", layout="wide")

# ------------------------------
# App Header
# ------------------------------
st.image(
    "https://geographical.co.uk/wp-content/uploads/carbon-dioxide-emissions-title.jpg", width=80
)
st.title("üåç CO2 Emission Forecasting App")
st.caption("Built for Industrial Auditing Purposes")
st.markdown("""
This application enables organizations to forecast CO‚ÇÇ emissions based on operational and supply chain inputs.

**Business Value:**
- Track CO‚ÇÇ footprint across supply chain
- Compare forecast vs historical emissions
- Make data-driven ESG decisions
""")

# --- Load Dataset ---
df = pd.read_csv("CO2_Emission_Prediction_Dataset.csv")
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

# --- Constants ---
target_vars = [
    'Total CO2 Emissions from Facility (kg)',
    'CO2 Emissions After Initiatives (kg)',
    'CO2 Emissions per km/mile (kg/km)'
]
categorical_features = ['Facility Type', 'Emission Source', 'Transport Mode', 'Material Type', 'Supply Chain Activity']
numeric_features = ['Year', 'Month']

# --- Dropdown Options ---
FACILITY_TYPES = ['Manufacturing', 'Office', 'Warehouse']
EMISSION_SOURCES = ['Electricity', 'Fuel', 'Transport', 'Waste']
TRANSPORT_MODES = ['Air', 'Rail', 'Ship', 'Truck']
MATERIAL_TYPES = ['Aluminum', 'Plastic', 'Steel']
SUPPLY_CHAIN_ACTIVITIES = ['Inbound', 'Internal', 'Outbound']

# --- Sidebar Filters ---
st.sidebar.header("üì• Forecast Parameters")
selected_facility = st.sidebar.selectbox("Facility Type", FACILITY_TYPES)
selected_emission = st.sidebar.selectbox("Emission Source", EMISSION_SOURCES)
selected_transport = st.sidebar.selectbox("Transport Mode", TRANSPORT_MODES)
selected_material = st.sidebar.selectbox("Material Type", MATERIAL_TYPES)
selected_activity = st.sidebar.selectbox("Supply Chain Activity", SUPPLY_CHAIN_ACTIVITIES)
today = date.today()
selected_pred_date = st.sidebar.date_input("Prediction Date (within 1 year)", value=today + timedelta(days=30), min_value=today, max_value=today + timedelta(days=365))

# --- Grade Calculation ---
grade_score_map = {'A': 5, 'B': 4, 'C': 3, 'D': 2, 'E': 1}
grade_color_map = {
    'A': 'üü© Excellent (A)',
    'B': 'üü¶ Good (B)',
    'C': 'üü® Moderate (C)',
    'D': 'üü• Poor (D)',
    'E': 'üü• Critical (E)'
}

grades = []
predictions_dict = {}
min_max_dict = {}

# --- Prediction & Grading ---
X = pd.get_dummies(df[categorical_features + numeric_features])
for target in target_vars:
    y = df[target]
    model = RandomForestRegressor(n_estimators=200, random_state=42)
    model.fit(X, y)

    input_data = {
        'Facility Type_' + selected_facility: 1,
        'Emission Source_' + selected_emission: 1,
        'Transport Mode_' + selected_transport: 1,
        'Material Type_' + selected_material: 1,
        'Supply Chain Activity_' + selected_activity: 1,
        'Year': selected_pred_date.year,
        'Month': selected_pred_date.month
    }
    input_df = pd.DataFrame([input_data])
    for col in X.columns:
        if col not in input_df.columns:
            input_df[col] = 0
    input_df = input_df[X.columns]

    pred = model.predict(input_df)[0]
    predictions_dict[target] = pred
    min_val = df[target].min()
    max_val = df[target].max()
    min_max_dict[target] = (min_val, max_val)

    # Grade logic
    q1 = np.percentile(df[target], 25)
    q2 = np.percentile(df[target], 50)
    q3 = np.percentile(df[target], 75)

    if pred <= q1:
        grade = 'A'
    elif pred <= q2:
        grade = 'B'
    elif pred <= q3:
        grade = 'C'
    elif pred <= max_val:
        grade = 'D'
    else:
        grade = 'E'

    grades.append(grade)

# --- Overall Grade ---
avg_score = np.mean([grade_score_map[g] for g in grades])
if avg_score >= 4.5:
    overall = 'A'
elif avg_score >= 3.5:
    overall = 'B'
elif avg_score >= 2.5:
    overall = 'C'
elif avg_score >= 1.5:
    overall = 'D'
else:
    overall = 'E'

# --- Display Grade Above Tabs ---
st.markdown(f"## ‚úÖ **Overall Environmental Emission Grade:** {grade_color_map[overall]}")
st.caption("This grade is based on percentile-normalized CO‚ÇÇ predictions across 3 dimensions.")

# --- Tabs ---
tab1, tab2 = st.tabs(["üìà Forecast & KPIs", "üìä Historical Comparison"])

# --- Tab 1: Forecast KPIs Vertical ---
with tab1:
    for target in target_vars:
        st.markdown(f"### {target}")
        st.metric(label="Predicted Value", value=f"{predictions_dict[target]:,.2f}")
        st.success(f"Min: {min_max_dict[target][0]:,.2f}")
        st.warning(f"Max: {min_max_dict[target][1]:,.2f}")
        st.markdown("---")

# --- Tab 2: Historical Trend Charts ---
with tab2:
    st.subheader("Historical CO2 Emissions Comparison")
    filtered_df = df[
        (df['Facility Type'] == selected_facility) &
        (df['Emission Source'] == selected_emission) &
        (df['Transport Mode'] == selected_transport) &
        (df['Material Type'] == selected_material) &
        (df['Supply Chain Activity'] == selected_activity)
    ].sort_values('Date')

    if not filtered_df.empty:
        for target in target_vars:
            st.markdown(f"**{target}**")
            fig, ax = plt.subplots(figsize=(10, 4))
            ax.plot(filtered_df['Date'], filtered_df[target], label='Historical')
            ax.set_facecolor("none")
            fig.patch.set_alpha(0.0)
            ax.axvline(pd.to_datetime(selected_pred_date), color='orange', linestyle='--', label='Prediction Date')
            ax.set_xlabel("Date")
            ax.set_ylabel(target)
            ax.grid(True, linestyle=':', alpha=0.6)
            ax.legend()
            st.pyplot(fig)
    else:
        st.warning("No matching historical data found for selected inputs.")
