# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18AWPCMqJpvj-38SHmHtKDX6Mh4_ZQust
"""

import streamlit as st
from datetime import date
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

# ------------------------------
# Page config & branding
# ------------------------------
st.set_page_config(
    page_title="CO2 Emission Predictor",
    page_icon="üåø",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ------------------------------
# Custom Styles and Title
# ------------------------------
st.markdown("""
<style>
    .main {
        background-color: #f5f7fa;
        font-family: 'Segoe UI', sans-serif;
    }
    h1, h2, h3 {
        color: #204051;
    }
</style>
""", unsafe_allow_html=True)

st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Green_leaf_icon.svg/1024px-Green_leaf_icon.svg.png", width=80)
st.title("üåç Carbon Emission Forecasting App")
st.caption("Built with üíö using Streamlit + Random Forest")

st.markdown("""
This application enables organizations to forecast CO‚ÇÇ emissions based on supply chain and operational parameters.

**Benefits & Business Value:**
- ‚úÖ Identify emission hotspots across operations
- ‚úÖ Make data-driven sustainability decisions
- ‚úÖ Monitor progress toward ESG goals
- ‚úÖ Visualize emission trends over time
""")

# ------------------------------
# Load and preprocess data
# ------------------------------
df = pd.read_csv("CO2_Emission_Prediction_Dataset.csv")

df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

categorical_features = ['Facility Type', 'Emission Source', 'Transport Mode', 'Material Type', 'Supply Chain Activity']
numeric_features = ['Year', 'Month']
target_vars = [
    'Total CO2 Emissions from Facility (kg)',
    'CO2 Emissions After Initiatives (kg)',
    'CO2 Emissions per km/mile (kg/km)'
]

# Dropdown values
FACILITY_TYPES = ['Manufacturing', 'Office', 'Warehouse']
EMISSION_SOURCES = ['Electricity', 'Fuel', 'Transport', 'Waste']
TRANSPORT_MODES = ['Air', 'Rail', 'Ship', 'Truck']
MATERIAL_TYPES = ['Aluminum', 'Plastic', 'Steel']
SUPPLY_CHAIN_ACTIVITIES = ['Inbound', 'Internal', 'Outbound']

# ------------------------------
# Sidebar Inputs
# ------------------------------
st.sidebar.header("üì• Forecast Parameters")
target_choice = st.sidebar.selectbox("Target Variable", target_vars)
selected_facility = st.sidebar.selectbox("Facility Type", FACILITY_TYPES)
selected_emission = st.sidebar.selectbox("Emission Source", EMISSION_SOURCES)
selected_transport = st.sidebar.selectbox("Transport Mode", TRANSPORT_MODES)
selected_material = st.sidebar.selectbox("Material Type", MATERIAL_TYPES)
selected_activity = st.sidebar.selectbox("Supply Chain Activity", SUPPLY_CHAIN_ACTIVITIES)

# Full date range from 1997 to 2050
selected_date = st.sidebar.date_input("Prediction Date", value=date(2027, 1, 1), min_value=date(1997, 1, 1), max_value=date(2050, 12, 31))

# ------------------------------
# Train Random Forest Model
# ------------------------------
X = pd.get_dummies(df[categorical_features + numeric_features])
y = df[target_choice]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=200, random_state=42)
model.fit(X_train, y_train)

# ------------------------------
# Prediction
# ------------------------------
st.subheader("üîÆ CO2 Emission Forecast")

input_data = {
    'Facility Type_' + selected_facility: 1,
    'Emission Source_' + selected_emission: 1,
    'Transport Mode_' + selected_transport: 1,
    'Material Type_' + selected_material: 1,
    'Supply Chain Activity_' + selected_activity: 1,
    'Year': selected_date.year,
    'Month': selected_date.month
}

full_input = pd.DataFrame([input_data])
for col in X.columns:
    if col not in full_input.columns:
        full_input[col] = 0
full_input = full_input[X.columns]

pred_value = model.predict(full_input)[0]
predictions = [tree.predict(full_input)[0] for tree in model.estimators_]
conf_int = np.percentile(predictions, [2.5, 97.5])

st.metric(label=f"Predicted {target_choice}", value=f"{pred_value:,.2f}")
st.info(f"95% Prediction Interval: [{conf_int[0]:,.2f}, {conf_int[1]:,.2f}]")

# ------------------------------
# üìâ Historical Chart (1997‚Äì2024)
# ------------------------------
st.subheader("üìâ Historical Emissions (1997‚Äì2024)")

historical_df = df[
    (df['Facility Type'] == selected_facility) &
    (df['Emission Source'] == selected_emission) &
    (df['Transport Mode'] == selected_transport) &
    (df['Material Type'] == selected_material) &
    (df['Supply Chain Activity'] == selected_activity) &
    (df['Date'] < pd.to_datetime('2025-01-01'))
][['Date', target_choice]].dropna().sort_values('Date')

if not historical_df.empty:
    fig1, ax1 = plt.subplots(figsize=(10, 4))
    ax1.plot(historical_df['Date'], historical_df[target_choice], marker='o', linestyle='-')
    ax1.set_xlabel("Date")
    ax1.set_ylabel(target_choice)
    ax1.set_title("Historical CO2 Emissions")
    ax1.grid(True)
    st.pyplot(fig1)
else:
    st.warning("No historical data found for selected filters.")

# ------------------------------
# üìà Future Prediction (Single Point)
# ------------------------------
st.subheader("üìà Forecasted Emission (Selected Future Date)")

future_df = pd.DataFrame({
    'Date': [selected_date],
    'Predicted CO2': [pred_value]
}).set_index('Date')

st.line_chart(future_df)
